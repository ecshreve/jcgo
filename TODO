Projects:
    Large:
        Full JSON spec support:
            json spec: https://www.json.org/json-en.html
            ✔ do an audit of where this implementation differs from the spec @done(20-06-14 23:45)
                doesn't actually differ from the spec, other than handling arrays of scalar values
            ☐ handle arrays of scalar values
            ☐ [maybe] refactor `SliceObj` to `ArrayObj`
            ☐ [maybe] investigate changing `MapObj` to hold a `map` not a `slice` of `Objects`

    Medium:
        ☐ fill empty cells as a config option
            current implementation fills all empty cells by default, would be nice if this was a configuration option
        ☐ support for reading input from the command line
            current implementation can only read from a file, maybe implement the ability to just copy paste a big blob?
        ☐ decouple the flag parsing stuff from the `parser` package
        ☐ implement `Stringer` interface of the `Object` types

    Small:
        ✔ specify output file as command line option @started(20-06-14 22:02) @done(20-06-14 22:52) @lasted(50m46s)
        ☐ publish godoc
        ☐ revise readme file
        ☐ audit existing packages to see if scope makes sense for funcs
        ☐ make vscode snippet for table test bootstrapping

Testing:
    ☐ get some larger JSON files to test/validate/snapshot with
    ☐ add `go test` examples
    ☐ is it possible to mock some functions to force error responses?

Tooling:
    ☐ fix the weird assert package import thing
        sometimes when I use `assert` in a test file it auto imports a weird package and not the testify/assert one it should
    ☐ make golint/gofmt order package imports the way I like them ordered
        go standard packages, newline, third party packages, newline, internalpackages
    ☐ something is weird with my current "build on save" configuration
    ☐ configure .envrc file and environment setup/handling

Questions:
    ☐ end to end integration tests in go?
    ☐ useful test coverage for the main package?
    ☐ is this general directory structure okay?
        should the packages under `/internal` be there? should that directory be named something different?
    ☐ the object package has a lot of duplicate code, can we not?
    ☐ is there a way to run `make` commands from anywhere in the repo?
    
    


